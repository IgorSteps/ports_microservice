// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: s
func (_m *Service) Register(s *grpc.Server) {
	_m.Called(s)
}

// Service_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Service_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - s *grpc.Server
func (_e *Service_Expecter) Register(s interface{}) *Service_Register_Call {
	return &Service_Register_Call{Call: _e.mock.On("Register", s)}
}

func (_c *Service_Register_Call) Run(run func(s *grpc.Server)) *Service_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*grpc.Server))
	})
	return _c
}

func (_c *Service_Register_Call) Return() *Service_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_Register_Call) RunAndReturn(run func(*grpc.Server)) *Service_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
