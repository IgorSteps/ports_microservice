// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: external/proto/ports/service.proto

package ports_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortsServiceClient is the client API for PortsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortsServiceClient interface {
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error)
}

type portsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortsServiceClient(cc grpc.ClientConnInterface) PortsServiceClient {
	return &portsServiceClient{cc}
}

func (c *portsServiceClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error) {
	out := new(CreatePortResponse)
	err := c.cc.Invoke(ctx, "/ports.v1.PortsService/CreatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortsServiceServer is the server API for PortsService service.
// All implementations must embed UnimplementedPortsServiceServer
// for forward compatibility
type PortsServiceServer interface {
	CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error)
	mustEmbedUnimplementedPortsServiceServer()
}

// UnimplementedPortsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortsServiceServer struct {
}

func (UnimplementedPortsServiceServer) CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedPortsServiceServer) mustEmbedUnimplementedPortsServiceServer() {}

// UnsafePortsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortsServiceServer will
// result in compilation errors.
type UnsafePortsServiceServer interface {
	mustEmbedUnimplementedPortsServiceServer()
}

func RegisterPortsServiceServer(s grpc.ServiceRegistrar, srv PortsServiceServer) {
	s.RegisterService(&PortsService_ServiceDesc, srv)
}

func _PortsService_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServiceServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ports.v1.PortsService/CreatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServiceServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortsService_ServiceDesc is the grpc.ServiceDesc for PortsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ports.v1.PortsService",
	HandlerType: (*PortsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePort",
			Handler:    _PortsService_CreatePort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external/proto/ports/service.proto",
}
