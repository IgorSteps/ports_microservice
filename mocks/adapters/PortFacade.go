// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "ports_microservice/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// PortFacade is an autogenerated mock type for the PortFacade type
type PortFacade struct {
	mock.Mock
}

type PortFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *PortFacade) EXPECT() *PortFacade_Expecter {
	return &PortFacade_Expecter{mock: &_m.Mock}
}

// CreatePort provides a mock function with given fields: ctx, port
func (_m *PortFacade) CreatePort(ctx context.Context, port *entities.Port) (*entities.Port, error) {
	ret := _m.Called(ctx, port)

	var r0 *entities.Port
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Port) (*entities.Port, error)); ok {
		return rf(ctx, port)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Port) *entities.Port); ok {
		r0 = rf(ctx, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Port)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Port) error); ok {
		r1 = rf(ctx, port)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortFacade_CreatePort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePort'
type PortFacade_CreatePort_Call struct {
	*mock.Call
}

// CreatePort is a helper method to define mock.On call
//   - ctx context.Context
//   - port *entities.Port
func (_e *PortFacade_Expecter) CreatePort(ctx interface{}, port interface{}) *PortFacade_CreatePort_Call {
	return &PortFacade_CreatePort_Call{Call: _e.mock.On("CreatePort", ctx, port)}
}

func (_c *PortFacade_CreatePort_Call) Run(run func(ctx context.Context, port *entities.Port)) *PortFacade_CreatePort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Port))
	})
	return _c
}

func (_c *PortFacade_CreatePort_Call) Return(_a0 *entities.Port, _a1 error) *PortFacade_CreatePort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PortFacade_CreatePort_Call) RunAndReturn(run func(context.Context, *entities.Port) (*entities.Port, error)) *PortFacade_CreatePort_Call {
	_c.Call.Return(run)
	return _c
}

// GetPorts provides a mock function with given fields:
func (_m *PortFacade) GetPorts() ([]*entities.Port, error) {
	ret := _m.Called()

	var r0 []*entities.Port
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entities.Port, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entities.Port); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Port)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortFacade_GetPorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPorts'
type PortFacade_GetPorts_Call struct {
	*mock.Call
}

// GetPorts is a helper method to define mock.On call
func (_e *PortFacade_Expecter) GetPorts() *PortFacade_GetPorts_Call {
	return &PortFacade_GetPorts_Call{Call: _e.mock.On("GetPorts")}
}

func (_c *PortFacade_GetPorts_Call) Run(run func()) *PortFacade_GetPorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PortFacade_GetPorts_Call) Return(_a0 []*entities.Port, _a1 error) *PortFacade_GetPorts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PortFacade_GetPorts_Call) RunAndReturn(run func() ([]*entities.Port, error)) *PortFacade_GetPorts_Call {
	_c.Call.Return(run)
	return _c
}

// NewPortFacade creates a new instance of PortFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPortFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *PortFacade {
	mock := &PortFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
